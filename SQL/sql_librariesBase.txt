Создание базы данных LibrariesBase при использовании Microsoft SQL menegment Studio, 
а так прикрепление к нему доработок ввиде представлений, транзакций, индексов и функций. 

Create and fill:
USE master;
GO
IF EXISTS (SELECT Name FROM sys.databases WHERE name='LibrariesBase')
  ALTER DATABASE LibrariesBase SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
GO
DROP DATABASE IF EXISTS LibrariesBase;
GO
CREATE DATABASE LibrariesBase;
GO
ALTER DATABASE LibrariesBase SET RECOVERY SIMPLE;
GO

USE LibrariesBase;

DROP TABLE IF EXISTS Cities 
CREATE TABLE Cities (
	CityID BIGINT IDENTITY(1,1) NOT NULL,
	CityName NVARCHAR(20) NOT NULL,
	
	CONSTRAINT PK_Cities PRIMARY KEY (CityID),
	CONSTRAINT UQ_Cities_CityNames UNIQUE (CityName)
);

DROP TABLE IF EXISTS Libraries  
CREATE TABLE Libraries  (
	LibraryID BIGINT IDENTITY(1,1) NOT NULL,
	CityID BIGINT NOT NULL,
	LibraryName NVARCHAR(50) NOT NULL,
	
	CONSTRAINT PK_Libraries PRIMARY KEY (LibraryID),
	CONSTRAINT UQ_Libraries_LibraryNames UNIQUE (LibraryName),
	CONSTRAINT FK_Libraries_To_Cities FOREIGN KEY (CityID) REFERENCES Cities(CityID) ON DELETE CASCADE, 
);

DROP TABLE IF EXISTS Authors   
CREATE TABLE Authors   (
	AuthorID  BIGINT IDENTITY(1,1) NOT NULL,
	LastName NVARCHAR(20) NOT NULL,
	FirstName NVARCHAR(20) NOT NULL,
	
	CONSTRAINT PK_Authors PRIMARY KEY (AuthorID),
	CONSTRAINT UQ_Authors_Names UNIQUE (LastName, FirstName)
);

DROP TABLE IF EXISTS BookTitles 
CREATE TABLE BookTitles (
	BookTitleID  BIGINT IDENTITY(1,1) NOT NULL,
	Title NVARCHAR(50) NOT NULL,
	
	CONSTRAINT PK_BookTitles PRIMARY KEY (BookTitleID)
);

DROP TABLE IF EXISTS BookTitlesAuthors 
CREATE TABLE BookTitlesAuthors  (
	BookTitlesAuthorID  BIGINT IDENTITY(1,1) NOT NULL, 
	BookTitleID BIGINT NOT NULL,
	AuthorID BIGINT NOT NULL,
	
	CONSTRAINT PK_BookTitlesAuthors PRIMARY KEY (BookTitlesAuthorID), 
	CONSTRAINT FK_BookTitlesAuthors_To_BookTitles FOREIGN KEY (BookTitleID) REFERENCES BookTitles(BookTitleID) ON DELETE CASCADE, 
	CONSTRAINT FK_BookTitlesAuthors_To_Authors FOREIGN KEY (AuthorID) REFERENCES Authors(AuthorID) ON DELETE CASCADE
);

DROP TABLE IF EXISTS Books  
CREATE TABLE Books (
	BookID  BIGINT IDENTITY(1,1) NOT NULL, 
	BookTitleID BIGINT NOT NULL,
	LibraryID BIGINT NOT NULL, 
	-- 1 - нормальное, 2 - утеряна, 3 - списана,4 - в переплете
	Status INT NOT NULL,
	-- 1 - доступна, 2 - выдана
	IsAvailable BIT NOT NULL, 
	Price MONEY NOT NULL, 
	ReceiptDate DATE NOT NULL, 

	CONSTRAINT PK_Books PRIMARY KEY (BookID), 
	CONSTRAINT FK_Books_To_BookTitles FOREIGN KEY (BookTitleID) REFERENCES BookTitles(BookTitleID) ON DELETE CASCADE, 
	CONSTRAINT FK_Books_To_Libraries FOREIGN KEY (LibraryID) REFERENCES Libraries(LibraryID) ON DELETE CASCADE
);


DROP TABLE IF EXISTS Persons;
CREATE TABLE Persons (
	PersonID BIGINT IDENTITY(1,1) NOT NULL,
	LastName NVARCHAR(20) NOT NULL,
	FirstName NVARCHAR(20) NOT NULL,
	CONSTRAINT PK_Students PRIMARY KEY (PersonID)
 );

 --BooksPersons (BookPersonID, PersonID, BookID, BeginDate, ReturnDate) - факты выдачи-возвращения книг.
 DROP TABLE IF EXISTS BooksPersons   
CREATE TABLE BooksPersons  (
	BooksPersonID  BIGINT IDENTITY(1,1) NOT NULL, 
	PersonID BIGINT NOT NULL,
	BookID BIGINT NOT NULL, 
	BeginDate DATE NOT NULL, 
	ReturnDate DATE NOT NULL, 

	CONSTRAINT PK_BooksPersons PRIMARY KEY (BooksPersonID), 
	CONSTRAINT FK_BooksPersons_To_Persons FOREIGN KEY (PersonID) REFERENCES Persons(PersonID) ON DELETE CASCADE, 
	CONSTRAINT FK_BooksPersons_To_Books FOREIGN KEY (BookID) REFERENCES Books(BookID) ON DELETE CASCADE
);


INSERT INTO Cities (CityName) VALUES ('Astana'); 
INSERT INTO Cities (CityName) VALUES ('New York'); 
INSERT INTO Cities (CityName) VALUES ('Moscow'); 
INSERT INTO Cities (CityName) VALUES ('Tokio'); 


INSERT INTO Libraries(CityID, LibraryName) VALUES (1, 'National Academic Library of the Kazakhstan'); 
INSERT INTO Libraries(CityID, LibraryName) VALUES (1, 'Central City Library. M.O. Auezov'); 
INSERT INTO Libraries(CityID, LibraryName) VALUES (3, 'Russian State Library for Youth'); 
INSERT INTO Libraries(CityID, LibraryName) VALUES (2, 'New York Public Library'); 
INSERT INTO Libraries(CityID, LibraryName) VALUES (4, 'Tokyo Metropolitan Central Library'); 
INSERT INTO Libraries(CityID, LibraryName) VALUES (4, 'University of Tokyo Library'); 


INSERT INTO Authors(LastName, FirstName) VALUES ('Пушкин', 'Александр'); 
INSERT INTO Authors(LastName, FirstName) VALUES ('Кунанбаев', 'Абай'); 
INSERT INTO Authors(LastName, FirstName) VALUES ('Лев', 'Толстой'); 
INSERT INTO Authors(LastName, FirstName) VALUES ('Брэдбери', 'Рэй'); 
INSERT INTO Authors(LastName, FirstName) VALUES ('Твен', 'Марк'); 
INSERT INTO Authors(LastName, FirstName) VALUES ('Фёдор', 'Достоевский'); 


INSERT INTO BookTitles(Title) VALUES ('Война и мир'); 
INSERT INTO BookTitles(Title) VALUES ('Капитанская дочка'); 
INSERT INTO BookTitles(Title) VALUES ('Преступление и наказание'); 
INSERT INTO BookTitles(Title) VALUES ('Бесы'); 
INSERT INTO BookTitles(Title) VALUES ('Слова назидания'); 
INSERT INTO BookTitles(Title) VALUES ('441 градус по Фаренгейту'); 
INSERT INTO BookTitles(Title) VALUES ('Вино из одуванчиков'); 
INSERT INTO BookTitles(Title) VALUES ('1984'); 
INSERT INTO BookTitles(Title) VALUES ('Лолита'); 
INSERT INTO BookTitles(Title) VALUES ('Человек-невидимка'); 
INSERT INTO BookTitles(Title) VALUES ('Кентерберийские рассказы'); 
INSERT INTO BookTitles(Title) VALUES ('Сто лет одиночества'); 
INSERT INTO BookTitles(Title) VALUES ('Великий Гэтсби'); 
INSERT INTO BookTitles(Title) VALUES ('Капитал'); 
INSERT INTO BookTitles(Title) VALUES ('Властелин колец'); 
INSERT INTO BookTitles(Title) VALUES ('Гарри Поттер'); 
INSERT INTO BookTitles(Title) VALUES ('Винни-Пух'); 
INSERT INTO BookTitles(Title) VALUES ('Мастер и Маргарита'); 
INSERT INTO BookTitles(Title) VALUES ('Убить пересмешника'); 
INSERT INTO BookTitles(Title) VALUES ('Анна Каренина'); 
INSERT INTO BookTitles(Title) VALUES ('Гамлет'); 



INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (1,3); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (2,21); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (3,20); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (4,19); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (5,18); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (6,17); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (6,16); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (5,15); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (4,14); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (3,13); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (2,12); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (1,11); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (4,10); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (1,9); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (3,8); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (5,7); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (4,6); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (6,5); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (2,4); 
INSERT INTO BookTitlesAuthors(AuthorID,BookTitleID) VALUES (2,2); 




GO
INSERT INTO Books(BookTitleID, LibraryID, Status, IsAvailable, Price, ReceiptDate) 
VALUES (RAND()*(21-1)+1 , RAND()*(7-1)+1, 1, CAST(ROUND(RAND(), 0) AS BIT), RAND()*(25000-1)+1, DATEADD(DAY, (ABS(CHECKSUM(NEWID())) % 65530) , 0)) 
GO 50


INSERT INTO Persons(LastName, FirstName) VALUES ('Mustafina', 'Dilnaz'); 
INSERT INTO Persons(LastName, FirstName) VALUES ('Mustafina', 'Dameli'); 
INSERT INTO Persons(LastName, FirstName) VALUES ('Mustafina', 'Damira'); 
INSERT INTO Persons(LastName, FirstName) VALUES ('Nun', 'Abu'); 
INSERT INTO Persons(LastName, FirstName) VALUES ('Kim', 'Dias'); 
INSERT INTO Persons(LastName, FirstName) VALUES ('Zhanbulat', 'Aruzhan'); 
INSERT INTO Persons(LastName, FirstName) VALUES ('Serikov', 'Ivan'); 
INSERT INTO Persons(LastName, FirstName) VALUES ('Tleuov', 'Akhan'); 
INSERT INTO Persons(LastName, FirstName) VALUES ('Asyl', 'Diana'); 
INSERT INTO Persons(LastName, FirstName) VALUES ('Karashulakova', 'Adelina'); 
INSERT INTO Persons(LastName, FirstName) VALUES ('Karashulakova', 'Aituar'); 


GO
INSERT INTO BooksPersons(PersonID, BookID, BeginDate, ReturnDate)
VALUES (RAND()*(11-1)+1, RAND()*(23-1)+1, 
DATEADD(DAY, (ABS(CHECKSUM(NEWID())) % 65530) , 0), DATEADD(DAY, (ABS(CHECKSUM(NEWID())) % 65530) , 0))
GO 100


globalInfo:
USE LibrariesBase; 

DROP TABLE IF EXISTS GlobalInfo  
CREATE TABLE GlobalInfo (
  GlobalInfoID INT NOT NULL IDENTITY PRIMARY KEY,
  LibraryID INT NOT NULL UNIQUE,
  BookProvided INT NOT NULL, -- к-во выданных книг за все время
);

DROP PROCEDURE IF EXISTS dbo.sp_Set_BookProvided;

CREATE PROCEDURE dbo.sp_Set_BookProvided 
AS
BEGIN
SET NOCOUNT ON
  DECLARE @LibraryID INT = 1; 
  DECLARE @BookProvided INT; 
  WHILE(@LibraryID < 7)
  BEGIN 
    SET @BookProvided = (SELECT COUNT(Books.BookID) 
	                       FROM BooksPersons INNER JOIN Books
							 ON Books.BookID = BooksPersons.BookID
						   WHERE LibraryID = @LibraryID)
    INSERT INTO GlobalInfo (LibraryID, BookProvided) 
	  VALUES (@LibraryID, @BookProvided); 
  SET @LibraryID += 1; 
  END
END;

EXEC dbo.sp_Set_BookProvided; 

DROP FUNCTION IF EXISTS dbo.udf_Get_BookProvided
CREATE FUNCTION dbo.udf_Get_BookProvided ()
RETURNS table 
AS
RETURN 
  SELECT LibraryID, BookProvided 
    FROM GlobalInfo

SELECT * FROM dbo.udf_Get_BookProvided ();



DROP TRIGGER IF EXISTS tr_GlobalInfo;
GO
CREATE TRIGGER tr_GlobalInfo ON GlobalInfo
  FOR INSERT, UPDATE, DELETE
AS
  SET NOCOUNT ON; 
  SELECT * FROM inserted;
  SELECT * FROM deleted;
  DECLARE @LibraryId INT = SELECT LibraryID FROM inserted
  UPDATE GlobalInfo
    SET BookProvided = (SELECT COUNT(Books.BookID) 
	                       FROM BooksPersons INNER JOIN Books
							 ON Books.BookID = BooksPersons.BookID
							   INNER JOIN inserted

						   WHERE Libraries.LibraryID = Books.LibraryID )
GO  

BEGIN TRANSACTION 
SET NOCOUNT ON;

INSERT INTO GlobalInfo(LibraryID, BookProvided) VALUES (8, 15); 

UPDATE GlobalInfo
  SET BookProvided = 0
  WHERE LibraryID = 1; 

ROLLBACK TRANSACTION; 


indexes:
USE LibrariesBase; 

GO 
EXEC sp_helpIndex 'Cities'; 
EXEC sp_helpIndex 'Libraries'; 
EXEC sp_helpIndex 'Persons'; 
EXEC sp_helpIndex 'Books'; 

DROP INDEX IF EXISTS index1; 
CREATE INDEX index1 ON Books (BookID);

DROP INDEX IF EXISTS IX_Cities_CityID ON Cities;
CREATE UNIQUE INDEX IX_Cities_CityID ON Cities (CityID);

DROP INDEX IF EXISTS IX_Cities_CityName ON Cities;
CREATE UNIQUE INDEX IX_Cities_CityName ON Cities (CityName);

DROP INDEX IF EXISTS IX_Libraries_LibraryID ON Libraries;
CREATE UNIQUE INDEX IX_Libraries_LibraryID ON Libraries (LibraryID);

DROP INDEX IF EXISTS IX_Libraries_LibraryName ON Libraries;
CREATE UNIQUE INDEX IX_Libraries_LibraryName ON Libraries (LibraryName);

DROP INDEX IF EXISTS IX_Persons_FirstName ON Persons;
CREATE UNIQUE INDEX IX_Persons_FirstName ON Persons (FirstName);

SP:
USE LibrariesBase; 

DROP INDEX IF EXISTS index1; 
CREATE INDEX index1 ON Books (BookID);


--к-во и список доступных книг (всего и по библиотеке) на данный момент
DROP PROCEDURE IF EXISTS IssuedBooks;

CREATE PROCEDURE IssuedBooks (@LibID INT)
AS
BEGIN
SET NOCOUNT ON
SELECT * 
  FROM dbo.vIssuedBooks
    WHERE LibraryID = @LibID; 
END;

EXEC IssuedBooks 5;


--сравнение цен по библиотеке

DROP PROCEDURE IF EXISTS PriceCompare;

CREATE PROCEDURE PriceCompare (@Title CHAR(50))
AS
BEGIN
SET NOCOUNT ON
SELECT Title, Libraries.LibraryName, Price 
  FROM BookTitles INNER JOIN Books
    ON BookTitles.BookTitleID = Books.BookTitleID
	  INNER JOIN Libraries
	    ON Libraries.LibraryID = Books.LibraryID
	WHERE Title = @Title
END;

EXEC PriceCompare 'Убить пересмешника';

SELECT * FROM Libraries; 

udf:
USE LibrariesBase; 

-- найти все факты выдачи-возвращения книг в одной библиотеке 
DROP FUNCTION IF EXISTS dbo.udf_Get_BooksPersons
CREATE FUNCTION dbo.udf_Get_BooksPersons (@LibraryID INT)
RETURNS table 
AS
RETURN 
  SELECT Books.BookID, BooksPersons.BooksPersonID, Libraries.LibraryName 
    FROM BooksPersons INNER JOIN Books
	  ON Books.BookID = BooksPersons.BookID
	    INNER JOIN Libraries
		  ON Libraries.LibraryID = Books.LibraryID
  WHERE Libraries.LibraryID = @LibraryID; 

SELECT * FROM dbo.udf_Get_BooksPersons(3);

view:
USE LibrariesBase; 

--к-во и список доступных книг (всего и по библиотеке) на данный момент
DROP VIEW IF EXISTS dbo.vIssuedBooks;
CREATE VIEW dbo.vIssuedBooks 
  AS SELECT BookTitles.Title, Books.BookTitleID, LibraryID, IsAvailable, Price 
    FROM Books INNER JOIN BookTitles
	  ON Books.BookTitleID = BookTitles.BookTitleID
	WHERE IsAvailable = 1;

SELECT Title, BookTitleID, LibraryID, IsAvailable, Price 
  FROM dbo.vIssuedBooks ;

GO

--автор который не написал ни одну книгу
--INSERT INTO Authors(FirstName, LastName) VALUES('Сара', 'Джио'); 

DROP VIEW IF EXISTS dbo.vAuthorWithoutBook; 

CREATE VIEW dbo.vAuthorWithoutBook
  AS SELECT * 
    FROM Authors 
	WHERE NOT EXISTS(SELECT * FROM BookTitlesAuthors
	               WHERE Authors.AuthorID = BookTitlesAuthors.AuthorID)
  
SELECT * FROM dbo.vAuthorWithoutBook;
